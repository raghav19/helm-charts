---
suite: test deployment
templates:
  - deployment.yaml
tests:
  - it: should use local values for container image if deployed as service chart
    set:
      image.registry: 3.4.5.6:5000
      image.name: isecl-ihub
      image.pullPolicy: IfNotPresent
      securityContext.ihub:
        runAsUser: 1001
        runAsGroup: 1001
        capabilities:
          drop:
          - all
        allowPrivilegeEscalation: false
      nameOverride: ihub-hello
    chart:
      appVersion: v4.1.0
    asserts:
      - hasDocuments:
          count: 1
      - equal:
          path: spec.template.spec.securityContext
          value: 
            fsGroup: 1001
      #TODO: add unit tests for init-container
      - equal:
          path: spec.template.spec.containers[0].image
          value: 3.4.5.6:5000/isecl-ihub:v4.1.0
      - equal:
          path: spec.template.spec.containers[0].imagePullPolicy
          value: IfNotPresent
      - equal:
          path: spec.template.spec.containers[0].securityContext.runAsUser
          value: 1001
      - equal:
          path: spec.template.spec.containers[0].securityContext.runAsGroup
          value: 1001
      - equal:
          path: spec.template.spec.containers[0].securityContext.capabilities
          value:
            drop:
            - all
      - equal:
          path: spec.template.spec.containers[0].securityContext.allowPrivilegeEscalation
          value: false
      - equal:
          path: spec.template.spec.containers[0].envFrom[0].configMapRef.name
          value: ihub-hello

  - it: should override name and namespace
    set:
      nameOverride: ihub-hello
    chart:
      version: 0.1.0
      appVersion: v4.1.0
    release:
      namespace: test
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Deployment
      - isAPIVersion:
          of: apps/v1
      - equal:
          path: metadata.name
          value: ihub-hello
      - equal:
          path: metadata.labels
          value: 
            helm.sh/chart: ihub-0.1.0
            app.kubernetes.io/version: "v4.1.0"
            app.kubernetes.io/name: ihub-hello
      - equal:
          path: metadata.namespace
          value: test
      - equal:
          path: spec.selector.matchLabels
          value: 
            app.kubernetes.io/name: ihub-hello
      - equal:
          path: spec.template.metadata.labels
          value:
            app.kubernetes.io/name: ihub-hello
      - equal:
          path: spec.template.spec.containers[0].name
          value: ihub-hello
      - equal:
          path: spec.template.spec.containers[0].envFrom[0].configMapRef.name
          value: ihub-hello
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[0].name
          value: ihub-hello-config
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[1].name
          value: ihub-hello-logs
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[2].name
          value: ihub-hello-k8s-certs
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[3].name
          value: ihub-hello-secrets
      - equal:
          path: spec.template.spec.volumes[0].name
          value: ihub-hello-config
      - equal:
          path: spec.template.spec.volumes[0].persistentVolumeClaim.claimName
          value: ihub-hello-config
      - equal:
          path: spec.template.spec.volumes[1].name
          value: ihub-hello-logs
      - equal:
          path: spec.template.spec.volumes[1].persistentVolumeClaim.claimName
          value: ihub-hello-logs
      - equal:
          path: spec.template.spec.volumes[2].name
          value: ihub-hello-k8s-certs
      - equal:
          path: spec.template.spec.volumes[2].configMap.name
          value: ihub-hello-k8s-certs
      - equal:
          path: spec.template.spec.volumes[3].name
          value: ihub-hello-secrets
      - equal:
          path: spec.template.spec.volumes[3].projected.sources[0].secret.name
          value: ihub-hello-credentials
 